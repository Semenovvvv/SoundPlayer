syntax = "proto3";

option csharp_namespace = "SoundPlayer";

package soundplayer;

import "Protos/ProtoEntities/track_entity.proto";
import "google/protobuf/empty.proto";

service TrackProto {
  rpc UploadTrackChunks (stream AudioChunk) returns (MessageResponse);
  rpc UploadTrackInfo (TrackInfo) returns (MessageResponse);
  rpc GetTrackInfo(TrackId) returns (TrackInfo);
  rpc GetTrackChunks(TrackId) returns (stream AudioChunk);
  rpc GetTrackList (GetTracksRequest) returns (GetTracksResponse);
  rpc DeleteTrack (DeleteTrackRequest) returns (MessageResponse);
  rpc StreamTrack (StreamTrackRequest) returns (stream AudioChunk);
  rpc GetTrackFormat (google.protobuf.Empty) returns (TrackFormat);
}

// UploadTrackFormat
message UploadTrackFormatRequest{
}
message UploadTrackFormatResponse{
}

// GetTrackList
message GetTracksRequest {
    string trackName = 1;
    int32 pageNumber = 2;
    int32 pageSize = 3;
}

message GetTracksResponse {
    int32 totalCount = 1;
    int32 pageNumber = 2;
    int32 pageSize = 3;
    repeated TrackEntity tracks = 4;
}

// DeleteTrack
message DeleteTrackRequest {
  int32 trackId = 1;
}

// StreamTrack
message StreamTrackRequest {
  int32 trackId = 1;
}

message AudioChunk {
  bytes data = 1;
  string fileName = 2;
  bool isFinalChunk = 3;
}

message TrackFormat {
  int32 AverageBytesPerSecond = 1;
  int32 BitsPerSample = 2;
  int32 BlockAlign = 3;
  int32 Channels = 4;
  int32 ExtraSize = 5;
  int32 SampleRate = 6;
  string Encoding = 7;
}

message MessageResponse{
	bool success = 1;
	string message = 2;
}

message TrackInfo{
	string name = 1;
	string userEmail = 2;
	int32 durationInSeconds = 3;
}

message TrackId{
	int32 id = 1;
}